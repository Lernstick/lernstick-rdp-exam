#!/bin/bash
# Name        : lernstick-exam-start
# Description : Starts an examination according to given examination configuration
# Author      : Ronny Standtke, Simon Kaspar
# Version     : 0.1
# ---------------------------------------------------------------------------------------

set -eE

. /usr/bin/lernstick-rdp-common

wayland_display="wayland-0"
xdg_runtime_dir_prefix="/run/user"
user_id=$(id -u user)

isWayland(){
	su -c "test -e '${xdg_runtime_dir_prefix}/${user_id}/${wayland_display}'" user
	return $?
}

runAsUiUser(){
	local command="$1"
	local display_options="export DISPLAY=:0"

	if isWayland
	then
		display_options="export WAYLAND_DISPLAY=${wayland_display};export XDG_RUNTIME_DIR=${xdg_runtime_dir_prefix}/${user_id}"
	fi

	su -c "${display_options};${command}" user
}

evaluateRDPScale(){
	local customScale=$1
	local rdpScale=100
	local primaryDisplay=""
	local monitorWidth=0
	local screenWidth=0
	local dpi=0
	local scale=0
	local uiInfo="/run/campla-lernstick-uiinfo/current_state.json"
	local customConfig="/tmp/campla-custom-config.json"

	if [ -n "$customScale" ]
	then
		# user defined rdpScale as command line parameter
		case $customScale in
			100) ;&
			140) ;&
			180)
				rdpScale=$customScale
				;;
			*)
				echo "The only supported rdpScale parameters are 100, 140 and 180."
				exit 1
				;;
		esac
	else
		if [ -e "${uiInfo}" ]
		then
			rdpScale=$(cat "${uiInfo}" | jq ".rdp_scale" | sed -E 's/(^"|"$)//g')
		fi
	fi
	
	if [ -f "$customConfig" ];then
		rdpScale=$(cat "${customConfig}" | jq -r ".rdp_scale")
	fi
	
	echo $rdpScale
}

checkSignature(){
	local config="$1"
	local signature="$2"
	local publicKey="/usr/share/lernstick-rdp-exam/intermed-exam-ca.pubkey"

	# check if signature file exists
	if ! [ -f "$signature" ]
	then
		echo 1
		return
	fi

	# check if public key exists
	if ! [ -f "$publicKey" ]
	then
		echo 1
		return
	fi

	# check signature of config
	if ! echo -n "$config" | openssl dgst \
		-verify "$publicKey" \
		-sha256 \
		-signature "$signature" >/dev/null 2>&1
	then
		# signature was invalid
		echo 1
	else
		echo 0
	fi
}

loadConfiguration(){
	local configZip="/usr/share/campla-lernstick-bridge/exam.zip"
	local jsonSchema="/usr/share/lernstick-rdp-exam/exam-conf-schema.json"
	local signatureFile=""
	local tmpDir="$1"
	local config=""
	local isValidSignature=1

	# check if config is available
	# give Firefox a short time span to finish the download
	sleep 1
	if [ ! -f "$configZip" ]
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "The exam configuration was not found.")"'
		exit 1
	fi

	# extract config
	if ! unzip -d "$tmpDir" "$configZip" >/dev/null 2>&1;
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "The exam configuration is invalid.")"'
		exit 1
	fi

	# validate with json schema
	if ! jsonschema -i "$tmpDir/exam.config" "$jsonSchema";
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "The exam configuration is invalid.")"'
		exit 1
	fi

	# load configuration
	config=$(<"$tmpDir/exam.config")

	# validate signature
	signatureFile="${tmpDir}/exam.config.sig"
	isValidSignature=$(checkSignature "$config" "$signatureFile")
	if [ "$isValidSignature" = "1" ]
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "The signature of the exam configuration is invalid.")"'
		exit 1
	fi

	echo "$config"
}

startVMExamination(){
	local config
	config="$1"
	local zenityPid
	zenityPid=0
	local vmServer
	vmServer=$(parseJSONKey "$config" 'vm_server')
	local vmUser
	vmUser=$(parseJSONKey "$config" 'vm_user')
	local vmPassword
	vmPassword=$(parseJSONKey "$config" 'vm_password')

	# open firewall
	sudo lernstick-rdp-open-firewall "$EXAM_CONFIG" "$TMP_DIR/exam.config.sig"
	EXIT_CODE=$?
	if [ $EXIT_CODE -eq 10 ]
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "The signature of the exam configuration is invalid.")"'
		exit 1

	elif [ $EXIT_CODE -ne 0 ]
	then
		runAsUiUser 'zenity --error --no-wrap --text "$(gettext "Could not open firewall.")"'
		exit 1
	fi

	#zenity --progress --pulsate --no-cancel --text "$(gettext "Starting exam, please wait...")" &
	#zenityPid=$!
	#trap killZenity ERR

	# start RDP connection to exam server
	local freerdp
	if isWayland
	then
		freerdp="wlfreerdp"
	else
		freerdp="xfreerdp"
	fi

	runAsUiUser "$freerdp /network:wan -themes -wallpaper +compression /gdi:hw /f /scale:${RDP_SCALE} /u:\"${vmUser}\" /p:\"${vmPassword}\" /v:\"${vmServer}\""
}

killZenity(){
	kill $zenityPid
}

startWebExamination(){
	local config
	config="$1"
	local webUrl
	webUrl=$(parseJSONKey "$config" 'web_url')

	# Configure proxy
    	sudo lernstick-rdp-open-proxy "$config" "$TMP_DIR/exam.config.sig"

	# start firefox in kiosk mode
	#firefox --kiosk --new-window "${webUrl}"
	runAsUiUser "firefox --new-window \"${webUrl}\""
	while true; do
		sleep 1
	done
}

startDummyExamination(){
	local config="$1"
	runAsUiUser 'zenity --info --no-wrap --text "$(gettext "Dummy examination started successfully.")"'
}

startLocalExamination(){
	local config="$1"
	while true; do
		sleep 1
	done
}

startExamination(){
	local config="$1"
	local examType=""

	examType=$(parseJSONKey "$config" 'exam_type')
	case "$examType" in
		"dummy")
			startDummyExamination "$config"
			;;
		"web")
			startWebExamination "$config"
			;;
		"vm")
			startVMExamination "$config"
			;;
		"local")
			startLocalExamination "$config"
			;;
		*)
			runAsUiUser 'zenity --error --no-wrap --text "$(gettext "Unknown examination type.")"'
			exit 1
			;;
	esac
}

# gettext support
. gettext.sh
export TEXTDOMAIN=lernstick-rdp-start-exam

# evaluate rdp scale
RDP_SCALE=$(evaluateRDPScale "$1")
echo "RDP_SCALE: $RDP_SCALE"

# load configuration
TMP_DIR=$(mktemp -d)
EXAM_CONFIG=$(loadConfiguration "$TMP_DIR")

# start examination according to the given configuration
startExamination "$EXAM_CONFIG"

# cleanup
if [ -d "$TMP_DIR" ]
then
	rm -rf "$TMP_DIR"
fi

exit 0

