#!/bin/bash
# Name        : lernstick-exam-start
# Description : Starts an examination according to given examination configuration
# Author      : Ronny Standtke, Simon Kaspar
# Version     : 0.1
# ---------------------------------------------------------------------------------------

set -e

. /usr/bin/lernstick-rdp-common

evaluateRDPScale(){
	local customScale=$1
	local rdpScale=100
	local primaryDisplay=""
	local monitorWidth=0
	local screenWidth=0
	local dpi=0
	local scale=0

	if [ -n "$customScale" ]
	then
		# user defined rdpScale as command line parameter
		case $customScale in
			100) ;&
			140) ;&
			180)
				rdpScale=$customScale
				;;
			*)
				echo "The only supported rdpScale parameters are 100, 140 and 180."
				exit 1
				;;
		esac
	else
		# try calculating good RDP_SCALE
		rdpScale=100

		# determine scaling
		primaryDisplay="$(xrandr | grep -w "connected primary")"
		#printf "primary display:\\n%s\\n" "$primaryDisplay"
		if [ -n "$primaryDisplay" ]
		then
			monitorWidth=$(echo "$primaryDisplay" | sed 's/.* \(.*\)mm x .*mm/\1/g')
			#echo "monitor width: $monitorWidth mm"
			if [ "$monitorWidth" -ne 0 ]
			then
				screenWidth=$(echo "$primaryDisplay" | sed 's/.* primary \(.*\)x.*+.*/\1/g')
				#echo "screen width: $screenWidth pixels"
				dpi=$((screenWidth*254/monitorWidth/10))
				#echo "dpi: $dpi"
				scale=$(echo "scale=2; ${dpi}/96" | bc)
				#echo "scaling factor ($dpi/96): $scale"
				if [ "$(echo "($scale > 1.4) && ($scale <= 1.8)" | bc -l)" -eq 1 ]
				then
					rdpScale=140
				elif [ "$(echo "$scale > 1.8" | bc -l)" -eq 1 ]
				then
					rdpScale=180
				fi
			fi
		fi
	fi
	echo $rdpScale
}

checkSignature(){
	local config="$1"
	local signature="$2"
	local publicKey="/usr/share/lernstick-rdp-exam/intermed-exam-ca.pubkey"

	# check if signature file exists
	if ! [ -f "$signature" ]
	then
		echo 1
		return
	fi

	# check if public key exists
	if ! [ -f "$publicKey" ]
	then
		echo 1
		return
	fi

	# check signature of config
	if ! echo -n "$config" | openssl dgst \
		-verify "$publicKey" \
		-sha256 \
		-signature "$signature" >/dev/null 2>&1
	then
		# signature was invalid
		echo 1
	else
		echo 0
	fi
}

gatherAndSendStatistics(){
	local instanceId="$1"
	local instanceToken="$2"
	local hasTPM="false"
	local tpmVersion="none"
	local resolution="none"
	local product="none"

	if [ -c /dev/tpm0 ];then
		hasTPM="true"
		tpmVersion="1.2"
		if [ -c /dev/tpmrm0 ];then
			tpmVersion="2.0"
		fi
	fi
	resolution=$(xrandr 2>/dev/null 2>/dev/null \
		| grep ' connected' \
		| grep -oE "[0-9]+x[0-9]+" \
		| tr -d "\n")
	product="$(sudo lshw -quiet -c "system" \
				| grep "product" \
				| head -n1 \
				| cut -d':' -f2 \
				| sed -e 's/^ *//g' \
				| sed -e 's/ *$//g' \
				| tr -d "\n")"
	echo "product=\"$product\""
	echo "resolution=\"$resolution\""
	echo "hasTPM=\"$hasTPM\""
	echo "tpmVersion=\"$tpmVersion\""
	curl \
		--header "Content-Type: application/json" \
		--request POST \
		--data "{\"auth\":{\"id\":\"${instanceId}\",\"token\":\"${instanceToken}\"},\"hardware\":{\"display\":{\"resolution\":\"${resolution}\"},\"system\":{\"product\":\"${product}\"},\"tpm\":{\"enabled\":${hasTPM},\"version\":\"${tpmVersion}\"}}}" \
		https://campla.adm.ds.fhnw.ch/rest/statistics/Hardware
}


loadConfiguration(){
	local configZip="/home/user/Schreibtisch/exam.zip"
	local jsonSchema="/usr/share/lernstick-rdp-exam/exam-conf-schema.json"
	local signatureFile=""
	local tmpDir="$1"
	local config=""
	local isValidSignature=1

	# check if config is available
	# give Firefox a short time span to finish the download
	sleep 1
	if [ ! -f "$configZip" ]
	then
		zenity --error --no-wrap --text "$(gettext "The exam configuration was not found.\\n\\nPlease download the exam configuration\\nto your desktop.")"
		exit 1
	fi

	# extract config
	if ! unzip -d "$tmpDir" "$configZip" >/dev/null 2>&1;
	then
		zenity --error --no-wrap --text "$(gettext "The exam configuration is invalid.\\n\\nPlease download the exam configuration\\nto your desktop.")"
		exit 1
	fi

	# validate with json schema
	if ! jsonschema -i "$tmpDir/exam.config" "$jsonSchema";
	then
		zenity --error --no-wrap --text "$(gettext "The exam configuration is invalid.\\n\\nPlease download the exam configuration\\nto your desktop.")"
		exit 1
	fi

	# load configuration
	config=$(<"$tmpDir/exam.config")

	# validate signature
	signatureFile="${tmpDir}/exam.config.sig"
	isValidSignature=$(checkSignature "$config" "$signatureFile")
	if [ "$isValidSignature" = "1" ]
	then
		zenity --error --no-wrap --text "$(gettext "The signature of the exam configuration is invalid.")"
		exit 1
	fi

	echo "$config"
}

startVMExamination(){
	local config
	config="$1"
	local zenityPid
	zenityPid=0
	local instanceId
	instanceId=$(parseJSONKey "$config" 'instance_id')
	local instanceToken
	instanceToken=$(parseJSONKey "$config" 'instance_token')
	local vmServer
	vmServer=$(parseJSONKey "$config" 'vm_server')
	local vmUser
	vmUser=$(parseJSONKey "$config" 'vm_user')
	local vmPassword
	vmPassword=$(parseJSONKey "$config" 'vm_password')

	# open firewall
	sudo lernstick-rdp-open-firewall "$EXAM_CONFIG" "$TMP_DIR/exam.config.sig"
	EXIT_CODE=$?
	if [ $EXIT_CODE -eq 10 ]
	then
		zenity --error --no-wrap --text "$(gettext "The signature of the exam configuration is invalid.")"
		exit 1

	elif [ $EXIT_CODE -ne 0 ]
	then
		zenity --error --no-wrap --text "$(gettext "Could not open firewall.")"
		exit 1
	fi

	# send hardware statistics
	gatherAndSendStatistics "$instanceId" "$instanceToken"

	zenity --progress --pulsate --no-cancel --text "$(gettext "Starting exam, please wait...")" &
	zenityPid=$!

	# start RDP connection to exam server
	xfreerdp \
		-wallpaper \
		/gdi:hw \
		/f \
		/scale:"$RDP_SCALE" \
		/u:"${vmUser}" \
		/p:"${vmPassword}" \
		/v:"${vmServer}"

	kill $zenityPid
}

startWebExamination(){
	local config
	config="$1"
	local instanceId
	instanceId=$(parseJSONKey "$config" 'instance_id')
	local instanceToken
	instanceToken=$(parseJSONKey "$config" 'instance_token')
	local webUrl
	webUrl=$(parseJSONKey "$config" 'web_url')

	# send hardware statistics
	gatherAndSendStatistics "$instanceId" "$instanceToken"

	# Configure proxy
        sudo lernstick-rdp-open-proxy "$config" "$TMP_DIR/exam.config.sig"

	# start firefox in kiosk mode
	#firefox --kiosk --new-window "${webUrl}"
	firefox --new-window "${webUrl}"
}

startDummyExamination(){
	local config="$1"
	zenity --info --no-wrap --text "$(gettext "Dummy examination started successfully.")"
}

startExamination(){
	local config="$1"
	local examType=""

	examType=$(parseJSONKey "$config" 'exam_type')
	case "$examType" in
		"dummy")
			startDummyExamination "$config"
			;;
		"web")
			startWebExamination "$config"
			;;
		"vm")
			startVMExamination "$config"
			;;
		*)
			zenity --error --no-wrap --text "$(gettext "Unknown examination type.")"
			exit 1
			;;
	esac
}

# gettext support
. gettext.sh
export TEXTDOMAIN=lernstick-rdp-start-exam

# evaluate rdp scale
RDP_SCALE=$(evaluateRDPScale "$1")
echo "RDP_SCALE: $RDP_SCALE"

# load configuration
TMP_DIR=$(mktemp -d)
EXAM_CONFIG=$(loadConfiguration "$TMP_DIR")

# start examination according to the given configuration
startExamination "$EXAM_CONFIG"

# cleanup
if [ -d "$TMP_DIR" ]
then
	rm -rf "$TMP_DIR"
fi

exit 0
